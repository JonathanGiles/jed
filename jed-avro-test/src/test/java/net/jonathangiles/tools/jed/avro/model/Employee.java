/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.jonathangiles.tools.jed.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -126275970810503203L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"net.jonathangiles.tools.jed.avro.model\",\"fields\":[{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"manager\",\"type\":[\"Employee\",\"null\"]},{\"name\":\"age\",\"type\":[\"int\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Employee> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Employee to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Employee from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Employee instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence firstName;
  @Deprecated public java.lang.CharSequence lastName;
  @Deprecated public net.jonathangiles.tools.jed.avro.model.Employee manager;
  @Deprecated public java.lang.Integer age;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param manager The new value for manager
   * @param age The new value for age
   */
  public Employee(java.lang.CharSequence firstName, java.lang.CharSequence lastName, net.jonathangiles.tools.jed.avro.model.Employee manager, java.lang.Integer age) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.manager = manager;
    this.age = age;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstName;
    case 1: return lastName;
    case 2: return manager;
    case 3: return age;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstName = (java.lang.CharSequence)value$; break;
    case 1: lastName = (java.lang.CharSequence)value$; break;
    case 2: manager = (net.jonathangiles.tools.jed.avro.model.Employee)value$; break;
    case 3: age = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'manager' field.
   * @return The value of the 'manager' field.
   */
  public net.jonathangiles.tools.jed.avro.model.Employee getManager() {
    return manager;
  }


  /**
   * Sets the value of the 'manager' field.
   * @param value the value to set.
   */
  public void setManager(net.jonathangiles.tools.jed.avro.model.Employee value) {
    this.manager = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static net.jonathangiles.tools.jed.avro.model.Employee.Builder newBuilder() {
    return new net.jonathangiles.tools.jed.avro.model.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static net.jonathangiles.tools.jed.avro.model.Employee.Builder newBuilder(net.jonathangiles.tools.jed.avro.model.Employee.Builder other) {
    if (other == null) {
      return new net.jonathangiles.tools.jed.avro.model.Employee.Builder();
    } else {
      return new net.jonathangiles.tools.jed.avro.model.Employee.Builder(other);
    }
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static net.jonathangiles.tools.jed.avro.model.Employee.Builder newBuilder(net.jonathangiles.tools.jed.avro.model.Employee other) {
    if (other == null) {
      return new net.jonathangiles.tools.jed.avro.model.Employee.Builder();
    } else {
      return new net.jonathangiles.tools.jed.avro.model.Employee.Builder(other);
    }
  }

  /**
   * RecordBuilder for Employee instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private net.jonathangiles.tools.jed.avro.model.Employee manager;
    private net.jonathangiles.tools.jed.avro.model.Employee.Builder managerBuilder;
    private java.lang.Integer age;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.jonathangiles.tools.jed.avro.model.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.manager)) {
        this.manager = data().deepCopy(fields()[2].schema(), other.manager);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasManagerBuilder()) {
        this.managerBuilder = net.jonathangiles.tools.jed.avro.model.Employee.newBuilder(other.getManagerBuilder());
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(net.jonathangiles.tools.jed.avro.model.Employee other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.manager)) {
        this.manager = data().deepCopy(fields()[2].schema(), other.manager);
        fieldSetFlags()[2] = true;
      }
      this.managerBuilder = null;
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.firstName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.lastName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'manager' field.
      * @return The value.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee getManager() {
      return manager;
    }


    /**
      * Sets the value of the 'manager' field.
      * @param value The value of 'manager'.
      * @return This builder.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder setManager(net.jonathangiles.tools.jed.avro.model.Employee value) {
      validate(fields()[2], value);
      this.managerBuilder = null;
      this.manager = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'manager' field has been set.
      * @return True if the 'manager' field has been set, false otherwise.
      */
    public boolean hasManager() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'manager' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder getManagerBuilder() {
      if (managerBuilder == null) {
        if (hasManager()) {
          setManagerBuilder(net.jonathangiles.tools.jed.avro.model.Employee.newBuilder(manager));
        } else {
          setManagerBuilder(net.jonathangiles.tools.jed.avro.model.Employee.newBuilder());
        }
      }
      return managerBuilder;
    }

    /**
     * Sets the Builder instance for the 'manager' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder setManagerBuilder(net.jonathangiles.tools.jed.avro.model.Employee.Builder value) {
      clearManager();
      managerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'manager' field has an active Builder instance
     * @return True if the 'manager' field has an active Builder instance
     */
    public boolean hasManagerBuilder() {
      return managerBuilder != null;
    }

    /**
      * Clears the value of the 'manager' field.
      * @return This builder.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder clearManager() {
      manager = null;
      managerBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder setAge(java.lang.Integer value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public net.jonathangiles.tools.jed.avro.model.Employee.Builder clearAge() {
      age = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.firstName = fieldSetFlags()[0] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lastName = fieldSetFlags()[1] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (managerBuilder != null) {
          try {
            record.manager = this.managerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("manager"));
            throw e;
          }
        } else {
          record.manager = fieldSetFlags()[2] ? this.manager : (net.jonathangiles.tools.jed.avro.model.Employee) defaultValue(fields()[2]);
        }
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.firstName);

    out.writeString(this.lastName);

    if (this.manager == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      this.manager.customEncode(out);
    }

    if (this.age == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.age);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);

      this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.manager = null;
      } else {
        if (this.manager == null) {
          this.manager = new net.jonathangiles.tools.jed.avro.model.Employee();
        }
        this.manager.customDecode(in);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.age = null;
      } else {
        this.age = in.readInt();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);
          break;

        case 1:
          this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.manager = null;
          } else {
            if (this.manager == null) {
              this.manager = new net.jonathangiles.tools.jed.avro.model.Employee();
            }
            this.manager.customDecode(in);
          }
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.age = null;
          } else {
            this.age = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










